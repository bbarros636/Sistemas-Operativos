/*
 * avaliacao.c Exercício de avaliação do guia 3 15/Out./2013
 */
#include <unistd.h>     /* Symbolic Constants */
#include <sys/types.h>  /* Primitive System Data Types */ 
#include <errno.h>      /* Errors */
#include <stdio.h>      /* Input/Output */
#include <stdlib.h>     /* General Utilities */
#include <pthread.h>    /* POSIX Threads */
#include <string.h>     /* String handling */
#include <semaphore.h>  /* Semaphore */

#define NUMERO_TAREFAS 2 /*Só há duas tarefas, neste exercício*/

sem_t pronto_encher, pronto_entregar_descarga;

void* thr_camiao(void *ptr);/*tarefa responsável pela entrega e descarga*/
void* thr_bomba(void *ptr);/*tarefa responsável por encher o camião*/


int main(){

	pthread_t t[NUMERO_TAREFAS];
	sem_init(&pronto_encher, 0, 0);/*Ambos os semáforos começam fechados*/
	sem_init(&pronto_entregar_descarga, 0, 0);
	
	/*Criar tarefa "camião"*/
	if (pthread_create(&t[0], NULL, thr_camiao, NULL) != 0) {
  		printf("Error creating thread.\n");
  		return -1;
  	}
	
	/*Criar tarefa "bomba"*/
	if (pthread_create(&t[1], NULL, thr_bomba, NULL) != 0) {
  		printf("Error creating thread.\n");
  		return -1;
  	}
	
	/*Opcional*/
	printf("O camião está a chegar.\n");
	sleep(2);
	printf("O camião chegou.\n");
	sleep(1);
	sem_post(&pronto_encher); /*dar inicio ao processo*/
	

	/*Esperar pela 1ª tarefa criada*/
  	if(pthread_join(t[0], NULL) != 0) {
  		printf("Error joining thread.\n");
    	return -1;
   	}
	/*Esperar pela 2ª tarefa criada*/
	if(pthread_join(t[1], NULL) != 0) {
  		printf("Error joining thread.\n");
    	return -1;
   	}
	
	sem_destroy(&pronto_encher); /* destroy semaphore */
	sem_destroy(&pronto_entregar_descarga); /* destroy semaphore */
	return 0;
}

/*
 * Funções
 */

/*tarefa responsável pela entrega e descarga*/
void* thr_camiao(void* ptr){
	sem_wait(&pronto_entregar_descarga);       /* down semaphore */
	printf("water truck: delivering \n" );
	sleep(5);
	printf("tank: filled \n" );
	sem_post(&pronto_encher);       /* up semaphore */
	return NULL;
}

/*tarefa responsável por encher o camião*/
void* thr_bomba(void* ptr){
	sem_wait(&pronto_encher);       /* down semaphore */
	printf("water pump: pumping \n" );
	sleep(2);
	sem_post(&pronto_entregar_descarga);       /* up semaphore */
	return NULL;
}
